//2D matrix in SFML
#include<iostream>
using namespace std;


#include "SFML/Graphics.hpp"

int main() {

    //create 40x40 map, use nested loop to initalize with 0s
    int map[40][40];
    for (int i = 0; i < 40; i++) {
        for (int j = 0; j < 40; j++)
            map[i][j] = 0;
    }

    //put a few sample values in (0 is water, 1 is grass, 2 is desert)
    map[20][20] = 1;
    map[24][31] = 1;
    map[12][22] = 2;
    map[39][26] = 2;

    //game set up (you'll need these two lines in every game)
    sf::RenderWindow renderWindow(sf::VideoMode(800, 800), "map"); //set up screen
    sf::Event event; //set up event queue


   //set up blocks
    sf::RectangleShape waterBlock(sf::Vector2f(20, 20));
    waterBlock.setFillColor(sf::Color::Blue);
    sf::RectangleShape grassBlock(sf::Vector2f(20, 20));
    grassBlock.setFillColor(sf::Color::Green);
    sf::RectangleShape desertBlock(sf::Vector2f(20, 20));
    desertBlock.setFillColor(sf::Color::Yellow);



    //###################GAME LOOP###############################################################

    while (renderWindow.isOpen()) {//keep window open until user shuts it down

        while (renderWindow.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                renderWindow.close();

        }//end event loop---------------------------------------------------------------


        //render loop for map
        for (int i = 0; i < 40; i++) { //rows
            for (int j = 0; j < 40; j++) //columns
                if (map[i][j] == 0) { //water is default
                    waterBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(waterBlock);
                }
                else if (map[i][j] == 1) {//grass block
                    grassBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(grassBlock);
                }
        }


        renderWindow.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;
} //end game
